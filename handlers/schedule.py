# <---------- –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π Aiogram ---------->
from aiogram import Router, types, F
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


# <---------- –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ---------->
from create_bot import bot
from data_base.operation import db_psql_UserData, db_psql_GetMainSchedule, db_psql_UpdateMainSchedule
from exceptions.ex_handlers import NotEnoughDays, InvalidWeekDay,\
    SundayException, NoLesson, InvalidLessonNumber, NotSuitableLessonNumber
from keyboards.kb_client import *
from keyboards.kb_schedule import *
from utilities.ut_handlers import ut_filterForMDV2, ut_ScheduleMessageToDict,\
	 ut_ScheduleDictToMessage, ut_ScheduleEnumSubjects
from utilities.ut_logger import ut_LogCreate


# <---------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---------->
filename = 'schedule.py'
days_0 = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
days_1 = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥—É', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü—É', '–°—É–±–±–æ—Ç—É']


# <---------- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---------->
class UpdateMainScheduleDailyFSM(StatesGroup):
	sc_days = State()
	sc_weekday_input = State()	
	sc_check = State()
	sc_approve = State()


# <---------- –†–æ—É—Ç–µ—Ä  ---------->
router = Router()
router.message()


# <---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---------->
async def client_IsGroupMember(id:int) -> bool:
	"""
	If client is in any group.
	:param id:
	:return:
	"""
	client_data = await db_psql_UserData(id=id)
	if client_data['group_id']:
		return True
	return False


# <---------- Handler —Ñ—É–Ω–∫—Ü–∏–∏ ---------->
async def schedule_FSM_ApproveUpload(message: types.Message, state: FSMContext):
	"""
	Simple one message schedule uploading.
	:param message:
	:return:
	"""
	try:
		if message.chat.type in ['supergroup', 'group']:
			await bot.send_message(
				chat_id=message.from_user.id,
				text=f'–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n',
				reply_markup=kb_reply_CommandStartOrHelp
			)
			exception = 'Used from group.'
			await state.clear()
		else:
			user_data = await db_psql_UserData(message.from_user.id)
			if user_data['group_id']:
				if user_data['group_admin']:
					if await state.get_state() is None:
						schedule_input = message.text
					else:
						data = await state.get_data()
						schedule_input = data['schedule_input']
					schedule_dict = await ut_ScheduleMessageToDict(schedule_input, 0)
					schedule_txt = await ut_ScheduleDictToMessage(schedule_dict, 0)
					subjects = await ut_ScheduleEnumSubjects(schedule_dict, 0)
					text = (
						'<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b> üìã\n'
						f'<b>–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ {len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>\n')
					for num, subject in enumerate(subjects):
						text += '  ' + subject
						if subject != subjects[-1]:
							text += ','
						if num % 2 != 0: text += '\n'
					text += f'\n\n<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ —Ç–∞–∫:</b>\n\n{schedule_txt}'
					await state.set_state(UpdateMainScheduleDailyFSM.sc_approve)
					async with state.proxy() as data:
						data['schedule_dict'] = schedule_dict
			await message.answer(
				text, 
				reply_markup=kb_reply_MainSchedule_Cancel
			)
			if await db_psql_GetMainSchedule(message.from_user.id):
				text = '<b>–û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?</b>'
			else: 
				text = '<b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ?</b>'
			await message.answer(
				text,
				reply_markup=kb_inline_MainSchedule_Approve
			)

	except NotEnoughDays:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			'–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ <b>5 –¥–Ω–µ–π</b>!\n'
			)
		await state.clear()
	except InvalidWeekDay as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–í —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}* –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
		await state.clear()
	except SundayException as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			'–í—ã —á—Ç–æ —É—á–∏—Ç–µ—Å—å –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º? üò∂‚Äçüå´Ô∏è\n'
			'–ï—Å–ª–∏ –∏ –ø—Ä–∞–≤–¥–∞ —Ç–∞–∫, <a href="https://t.me/SteePT">–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º</a>, –º—ã –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏–º!\n'
		)
		await state.clear()
	except NoLesson as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–í —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}* –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
		await state.clear()
	except InvalidLessonNumber as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–í —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}* –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
		await state.clear()
	except NotSuitableLessonNumber as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}*\n'
			'–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ *0* –∏–ª–∏ –±–æ–ª—å—à–µ *10*\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
		await state.clear()
	except Exception as exception:
		await ut_LogCreate(
			id=message.from_user.id,
			filename=filename,
			function='schedule_FSM_ApproveUpload',
			exception=exception,
			content=''
		)
		await state.clear()


async def schedule_FSM_StartUpload(message: types.Message, state: FSMContext):
	"""
	Triggered by '/update' - TEST
	:param message:
	:return:
	"""
	try:
		if message.chat.type in ['supergroup', 'group']:
			await bot.send_message(
				chat_id=message.from_user.id,
				text=f'{message.text} –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!\n',
				reply_markup=kb_reply_CommandStartOrHelp
				)
			await message.delete()
			content = 'No database operations.'
			exception = 'Used from group.'
		else:
			if await client_IsGroupMember(message.from_user.id):
				await message.answer(
					'*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚úèÔ∏è*\n',
					parse_mode='Markdown',
					reply_markup=kb_reply_MainSchedule_Cancel
					)
				await message.answer(
					'–í –∫–∞–∫–∏–µ –¥–Ω–∏ –≤—ã —É—á–∏—Ç–µ—Å—å? ‚úçÔ∏è',
					reply_markup=kb_inline_MainSchedule_Days
					)
				await state.set_state(UpdateMainScheduleDailyFSM.sc_days)
			else:
				await message.answer('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. ‚ùå\n')
	except Exception as exception:
		await ut_LogCreate(
			id=message.from_user.id,
			filename=filename,
			function='schedule_FSM_StartUpload',
			exception=exception,
			content=''
		)


async def schedule_FSM_DayChoise(query: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		data['days'] = int(query.data.replace('MainSchedule_Days', ''))
		data['current_day'] = 0
		data['schedule_input'] = '–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n'
	if data['days'] == 5:
		text = '–° –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ —Å—É–±–±–æ—Ç—É'
	else:
		text = '–° –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É'
	await query.message.edit_text(
		text=text, 
		reply_markup=None
		)
	await UpdateMainScheduleDailyFSM.next()
	await query.message.answer(
		f'–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {days_1[data["current_day"]]} üëá',
		reply_markup=kb_reply_MainSchedule_Cancel
		)
	await query.answer()


async def schedule_FSM_WeekDayInput(message: types.Message, state: FSMContext):
	try:
		await ut_ScheduleMessageToDict(message.text, 1)
		async with state.proxy() as data:
			data['schedule_input'] += (
				f'{days_0[data["current_day"]]}\n'
				f'{message.text}\n'
				)
			data['current_day'] += 1 
			if data['current_day'] == data['days']:
				await UpdateMainScheduleDailyFSM.next()
			await message.answer(
				f'–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {days_1[data["current_day"]]} üëá'
				)
	except NoLesson as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–í —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}* –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
	except InvalidLessonNumber as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–í —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}* –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
	except NotSuitableLessonNumber as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}*\n'
			'–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ *0* –∏–ª–∏ –±–æ–ª—å—à–µ *10*\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
	except Exception as exception:
		await ut_LogCreate(
			id=message.from_user.id,
			filename=filename,
			function='schedule_FSM_WeekDayInput',
			exception=exception,
			content=''
		)
		await state.clear()

	
async def schedule_FSM_CheckUpload(message: types.Message, state: FSMContext):
	try:
		await ut_ScheduleMessageToDict(message.text, 1)
		async with state.proxy() as data:
			data['schedule_input'] += (
				f'{days_0[data["current_day"]]}\n'
				f'{message.text}\n'
				)
		await schedule_FSM_ApproveUpload(message, state)
	except NoLesson as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–í —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}* –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
	except InvalidLessonNumber as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–í —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}* –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
	except NotSuitableLessonNumber as exception:
		await message.answer(
			'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚ùå\n'
			f'–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ *‚Ññ{exception.num}*\n'
			'–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ *0* –∏–ª–∏ –±–æ–ª—å—à–µ *10*\!\n'
			f'> {await ut_filterForMDV2(exception.line)}',
			parse_mode='MarkdownV2'
		)
	except Exception as exception:
		await ut_LogCreate(
			id=message.from_user.id,
			filename=filename,
			function='schedule_FSM_WeekDayInput',
			exception=exception,
			content=''
		)
		await state.clear()


async def schedule_FSM_SubmitUpload(query: types.CallbackQuery, state: FSMContext):
	try:
		await query.message.edit_reply_markup(reply_markup=None)
		async with state.proxy() as data:
			if await db_psql_UpdateMainSchedule(query.from_user.id, data["schedule_dict"]):
				await query.message.answer(
					'–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!',
					reply_markup=kb_reply_CommandStartOrHelp
				)
			else:
				await query.message.answer(
					'–û—à–∏–±–∫–∞ –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...',
					reply_markup=kb_reply_CommandStartOrHelp
				)
		await state.clear()
		await query.answer()
	except Exception as exception:
		await ut_LogCreate(
			id=query.from_user.id,
			filename=filename,
			function='schedule_FSM_SubmitUpload',
			exception=exception,
			content=''
		)


async def schedule_FSM_DeclineUpload(query: types.CallbackQuery, state: FSMContext):
	try:
		await query.message.edit_reply_markup(reply_markup=None)
		await query.message.answer(
			'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ ‚≠ï', 
			reply_markup=kb_reply_CommandStartOrHelp
		)
		await state.clear()
		await query.answer()
	except Exception as exception:
		await ut_LogCreate(
			id=query.from_user.id,
			filename=filename,
			function='schedule_FSM_DeclineUpload',
			exception=exception,
			content=''
		)


async def schedule_FSM_StopUpload(message: types.Message, state: FSMContext):
	await message.delete()
	await state.clear()
	await message.answer(
		'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ ‚≠ï', 
		reply_markup=kb_reply_CommandStartOrHelp
		)


async def schedule_FSM_ElseUpload(message: types.Message):
	await message.delete()
	await message.answer(
		'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏!\n'
		'–°–Ω–∞—á–∞–ª–∞ <b>–∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>'
		)


async def schedule_deleteButtons(query: types.CallbackQuery):
	await query.message.edit_text(
		text='–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ...',
		reply_markup=None
	)


def register_handlers():
	router.callback_query.register(schedule_FSM_SubmitUpload, F.data == 'MainSchedule_Submit', StateFilter(UpdateMainScheduleDailyFSM.sc_approve))
	router.callback_query.register(schedule_FSM_DeclineUpload, F.data == 'MainSchedule_Decline', StateFilter(UpdateMainScheduleDailyFSM.sc_approve))
	router.callback_query.register(schedule_deleteButtons, F.text.in_({'MainSchedule_Submit','MainSchedule_Decline'}))
	router.callback_query.register(schedule_FSM_DayChoise, F.data.in_({'MainSchedule_Days4', 'MainSchedule_Days5'}), StateFilter(UpdateMainScheduleDailyFSM.sc_days))
	router.message.register(schedule_FSM_ApproveUpload, F.text.startswith('–û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
	router.message.register(schedule_FSM_CheckUpload, StateFilter(UpdateMainScheduleDailyFSM.sc_check))
	router.message.register(schedule_FSM_StartUpload, Command('update'))
	router.message.register(schedule_FSM_WeekDayInput, StateFilter(UpdateMainScheduleDailyFSM.sc_weekday_input))
	router.message.register(schedule_FSM_StopUpload, F.text == '–û—Ç–º–µ–Ω–∞ ‚ùå', StateFilter(UpdateMainScheduleDailyFSM))
	router.message.register(schedule_FSM_ElseUpload, StateFilter(UpdateMainScheduleDailyFSM))
