# <---------- –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π Aiogram ---------->
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


# <---------- –ò–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ---------->
from create_bot import bot
from data_base.operation import db_psql_UserData, db_psql_InsertUser
from messages.ms_client import *
from messages.ms_regular import *
from keyboards.kb_client import *
from utilities.ut_logger import ut_LogCreate


# <---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---------->
states = ['sc_monday', 'sc_tuesday', 'sc_wednesday', 'sc_thursday', 'sc_friday', 'sc_saturday']
days_0 = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
days_1 = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥—É', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü—É', '–°—É–±–±–æ—Ç—É']


# <---------- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---------->
class UpdateMainScheduleFSM(StatesGroup):
    sc_monday = State()
    sc_tuesday = State()
    sc_wednesday = State()
    sc_thursday = State()
    sc_friday = State()
    sc_saturday = State()


# <---------- Handler —Ñ—É–Ω–∫—Ü–∏–∏ ---------->
async def schedule_FSM_StartUpload(message: types.Message):
	"""
	Triggered by '/update' - TEST
	:param message:
	:return:
	"""
	try:
		if message.chat.type == 'supergroup' or message.chat.type == 'group':
			await bot.send_message(
				chat_id=message.from_user.id,
				text=f'{message.text} –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!',
				reply_markup=kb_reply_CommandStartOrHelp
				)
			await message.delete()
			content = 'No database operations.'
			exception = 'Used from group.'
		else:
			if await client_IsGroupMember(message.from_id):
				await message.answer(
					'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚úèÔ∏è\n'
					'**–§–æ—Ä–º–∞—Ç:**\n'
					'1 –ê–ª–≥–µ–±—Ä–∞\n'
					'2 –ë–∏–æ–ª–æ–≥–∏—è\n'
					'3 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n'
					"(–ú–æ–∂–Ω–æ '1.' –∏ '1)')", parse_mode='Markdown'
					)
				await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. üëá')
				await UpdateMainScheduleFSM.sc_monday.set()
			else:
				await message.answer('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. ‚ùå')
	except Exception as exception:
		await ut_LogCreate(
			id=message.from_user.id,
			filename=filename,
			function='client_handler_UpdateMainSchedule',
			exception=exception,
			content=''
		)


async def schedule_FSM_WeekDayInput(message: types.Message, state: FSMContext):
    str_state = await state.get_state()
    str_state = str(str_state).replace('UpdateMainScheduleFSM:', '')
    async with state.proxy() as data:
        data[str_state] = message.text
        if str_state == 'sc_saturday':
            result = ''
            for s in states:
                day = days_0[states.index(s)]
                result += day + "\n" + data[s] + "\n\n"
            await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:')
            await message.answer(result)
            await message.answer('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?')
            await state.finish()
        else:
            day = days_1[states.index(str_state)+1]
            await message.answer(f"–¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}. üëá")
            await UpdateMainScheduleFSM.next()


def register_handlers_schedule(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö message –∏ callback —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –û—Å–Ω–æ–≤–Ω–æ–≥–æ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è'.
    :param dp:
    :return:
    """
    dp.register_message_handler(schedule_FSM_StartUpload, Text(['/update']))
    dp.register_message_handler(schedule_FSM_WeekDayInput, state=[UpdateMainScheduleFSM.sc_monday, UpdateMainScheduleFSM.sc_tuesday, 
                                                                      UpdateMainScheduleFSM.sc_wednesday, UpdateMainScheduleFSM.sc_thursday,
                                                                      UpdateMainScheduleFSM.sc_friday, UpdateMainScheduleFSM.sc_saturday])
